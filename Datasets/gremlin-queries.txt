QUERIES

1. Place tokens on node with ID 1
gremlin> g.V(1)
==>v[1]

2. See all the edges, i.e. place tokens on each edge
gremlin> g.E()
==>e[7][1-knows->2]
==>e[8][1-knows->4]
==>e[9][1-created->3]
==>e[10][4-created->5]
==>e[11][4-created->3]
==>e[12][6-created->3]

3. Get the label of vertex with ID 1
gremlin> g.V(1).label()
==>person

4. Get a list of all labels
gremlin> g.V().label()
==>person
==>person
==>software
==>person
==>software
==>person

5. Get unique labels only
gremlin> g.V().label().dedup()
==>person
==>software

6. Get outgoing edges by going back from Query 4
gremlin> g.V().as('v').label().select('v').outE()
==>e[9][1-created->3]
==>e[7][1-knows->2]
==>e[8][1-knows->4]
==>e[10][4-created->5]
==>e[11][4-created->3]
==>e[12][6-created->3]

7. Get the outgoing edges of all "Person" nodes
gremlin> g.V().hasLabel('person').as('p').outE()
==>e[9][1-created->3]
==>e[7][1-knows->2]
==>e[8][1-knows->4]
==>e[10][4-created->5]
==>e[11][4-created->3]
==>e[12][6-created->3]


8.  Get the label of nodes for which there are two outgoing edges
gremlin> g.V().as('v').label().as('l').select('v').out().out().select('l')
==>person
==>person

9. Get how many nodes have 2 outgoing edges (same as previous, but get count)
gremlin> g.V().as('v').label().as('l').select('v').out().out().select('l').count()
==>2

10. Get names of all vertices
gremlin> g.V().as('v').values('name')
==>marko
==>vadas
==>lop
==>josh
==>ripple
==>peter

11. Get the names of vertices that have 2 outgoing edges. (same as 8, but get names)
gremlin> g.V().as('v').values('name').as('n').select('v').out().out().select('n')
==>marko
==>marko

12. Get names and age of vertices with 2 outgoing edges (same as previous, but get both name and edge)
gremlin> g.V().as('v').values('name').as('n').select('v').values('age').as('a').select('v').out().out().select('n', 'a')
==>[n:marko,a:29]
==>[n:marko,a:29]

13. Get weights of created edges
gremlin> g.V().outE('created').values('weight')
==>0.4
==>1.0
==>0.4
==>0.2

14. Run a command from a file
gremlin> :load test.gr

15. Get the total weight of every person (by the weights of edges going out from them)

gremlin> g.V().hasLabel('person').as('p').project('n', 'total').by(map(values('name'))).by(map(coalesce(outE('created').values('weight').sum(), constant(0))))
==>[n:marko,total:0.4]
==>[n:vadas,total:0]
==>[n:josh,total:1.4]
==>[n:peter,total:0.2]

